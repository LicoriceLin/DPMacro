from typing import Dict,Union
import warnings

import anarci
import pandas as pd

from Bio.PDB.Structure import Structure
from Bio.PDB.Entity import Entity
from Bio.PDB.Atom import Atom

from BaseClasses import ResidueFeatureExtractor
from util import _list_feature_into_residue,_list_feature_into_frame,_integrated_residue_iterator
from util import allowed_residue_source,allowd_scheme,_impute_default_value
from Data import CDR_annotations
import distance_util as du


def _run_anarci(sequence_dict:Dict[str,str],scheme:allowd_scheme='a',
                object:Union[allowed_residue_source,None]=None,frame:Union[pd.DataFrame,None]=None)->None:
    """
    sequence_dict: generated by ResidueFeatureExtractor._produce_sequence
    """
    anarci_order,Fv_annotation,chain_type=[],[],[]
    for seq in sequence_dict.values():
        assert 'X' not in seq,f'invalid seqs: {seq}'
        anarci_results=anarci.run_anarci(seq,scheme=scheme)
        anarci_maps=anarci_results[1][0]
        chain_infos=anarci_results[2][0]
        assert anarci_maps,'this chain contains no Fv fragment'
        id,end,_anarci_order,_Fv_annotation,_chain_type=0,-1,[],[],[]
        for anarci_map,chain_info in zip(anarci_maps,chain_infos):
            last_end,start,end=end,anarci_map[1],anarci_map[2]

            _anarci_order.extend(
                [(' ',-1,' ')]*(start-last_end-1))
            _Fv_annotation.extend(
                [f'Lk{id}']*(start-last_end-1))
            _chain_type.extend(
                ['X']*(start-last_end-1))

            _anarci_order.extend(
                [(' ',)+i[0] for i in anarci_map[0] if i[1]!='-'])
            _Fv_annotation.extend(
                [f'Fv{id}']*(end-start+1))
            _chain_type.extend(
                [chain_info['chain_type']]*(end-start+1))    

            id += 1

        last_end,start=end,len(seq)
        _anarci_order.extend(
                [(' ',-1,' ')]*(start-last_end-1))
        _Fv_annotation.extend(
                [f'Lk{id}']*(start-last_end-1))
        _chain_type.extend(
                ['X']*(start-last_end-1))    
        anarci_order.extend(_anarci_order)
        Fv_annotation.extend(_Fv_annotation)
        chain_type.extend(_chain_type)

    if isinstance(object,Entity):
        _list_feature_into_residue(anarci_order,'anarci_order',object)
        _list_feature_into_residue(Fv_annotation,'Fv_annotation',object)
        _list_feature_into_residue(chain_type,'chain_type',object)
    
    if isinstance(frame,pd.DataFrame):
        _list_feature_into_frame(anarci_order,'anarci_order',frame)
        _list_feature_into_frame(Fv_annotation,'Fv_annotation',frame)
        _list_feature_into_frame(chain_type,'chain_type',frame)

    return anarci_order,Fv_annotation,chain_type

def _impute_cdr(object:allowed_residue_source,scheme:allowd_scheme='a')->None:
    '''
    must run `_run_anarci` before this function
    '''
    def key_func(scheme:str,chaintype:str)->str:
        if scheme in ['a','i','aho','imgt']:
            return scheme
        elif scheme in ['c','chothia','k','kabat']:
            return scheme+'|'+chaintype
        else:
            raise ValueError
    for i in _integrated_residue_iterator(object):
        annotation=CDR_annotations[key_func(scheme,i.xtra['chain_type'])]
        if i.xtra['anarci_order'][1]<annotation['FR1'] or i.xtra['anarci_order'][1]>annotation['end']:
            i.xtra['CDR']='LK'

        elif i.xtra['anarci_order'][1]>=annotation['FR1'] and i.xtra['anarci_order'][1]<annotation['CDR1']-1:
            i.xtra['CDR']='FW1'
        elif i.xtra['anarci_order'][1] in [annotation['CDR1']-1,annotation['FR2']] :
            i.xtra['CDR']='AC1'
        elif i.xtra['anarci_order'][1]>=annotation['CDR1'] and i.xtra['anarci_order'][1]<annotation['FR2']:
            i.xtra['CDR']='CDR1'

        elif i.xtra['anarci_order'][1]>annotation['FR2'] and i.xtra['anarci_order'][1]<annotation['CDR2']-1:
            i.xtra['CDR']='FW2'
        elif i.xtra['anarci_order'][1] in [annotation['CDR2']-1,annotation['FR3']] :
            i.xtra['CDR']='AC2'
        elif i.xtra['anarci_order'][1]>=annotation['CDR2'] and i.xtra['anarci_order'][1]<annotation['FR3']:
            i.xtra['CDR']='CDR2'

        elif i.xtra['anarci_order'][1]>annotation['FR3'] and i.xtra['anarci_order'][1]<annotation['CDR3']-1:
            i.xtra['CDR']='FW3'
        elif i.xtra['anarci_order'][1] in [annotation['CDR3']-1,annotation['FR4']] :
            i.xtra['CDR']='AC3'
        elif i.xtra['anarci_order'][1]>=annotation['CDR3'] and i.xtra['anarci_order'][1]<annotation['FR4']:
            i.xtra['CDR']='CDR3'

        elif i.xtra['anarci_order'][1]>annotation['FR4'] and i.xtra['anarci_order'][1]<=annotation['end']:
            i.xtra['CDR']='FW4'

def _impute_vicinity(object:allowed_residue_source)->None:
    '''
    must run after `impute_CDR`
    '''
    fw_heavy_list=[]
    vicinity_list=[]
    for residue in _integrated_residue_iterator(object):
        #impute left /right anchor of CDR as vicinity 
        #and get list of CDR / framework_ca separately

        # if 'CDR' in residue.xtra['CDR']:
        #     residue.xtra['vicinity']=1
        #     if 'FW' in last_residue.xtra.get('CDR','X'):
        #         last_residue.xtra['vicinity']=1
        #         vicinity_list.append(last_residue)
        #     vicinity_list.append(residue)            
        # elif 'FW' in residue.xtra['CDR']:
        #     fw_heavy_list.extend([atom for atom in residue.get_atoms() if atom.element != 'H'])
        #     if 'CDR' in last_residue.xtra.get('CDR','X'):
        #         residue.xtra['vicinity']=1
        #         vicinity_list.append(residue) 
        #     else:
        #         residue.xtra['vicinity']=0
        # else:
        #     residue.xtra['vicinity']=0
        
        if 'FW' in residue.xtra['CDR']:
            fw_heavy_list.extend([atom for atom in residue.get_atoms() if atom.element != 'H'])
        elif 'AC' in residue.xtra['CDR'] or 'CDR' in residue.xtra['CDR']:
            vicinity_list.append(residue)
    
    vicinity_heavy_dict=du.atom_within_threshold(fw_heavy_list,vicinity_list,4.5)

    plus_vicinity_list=pd.Series(vicinity_heavy_dict.keys()).apply(Atom.get_parent).value_counts().index.to_list()
    vicinity_list.extend(plus_vicinity_list)
    # atom:Atom=Atom() -> a placeholder for pylance 
    for residue in _integrated_residue_iterator(object):
        if residue in vicinity_list:
            residue.xtra['vicinity']=1
        else:
            residue.xtra['vicinity']=0
    
    return vicinity_list

