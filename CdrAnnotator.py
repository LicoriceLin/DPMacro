'''
antibody annotation functions.
run anarci and get the new residue id codes,
annotate the CDRs and their vicinity.
'''

from ctypes import Structure
from typing import Dict, Tuple,Union
# import warnings

import anarci
import pandas as pd

# from Bio.PDB.Structure import Structure
from Bio.PDB.Entity import Entity
from Bio.PDB.Atom import Atom
from Bio.PDB.Chain import Chain
from Bio.PDB.StructureBuilder import StructureBuilder

from BaseClasses import ResidueFeatureExtractor
from util import _list_feature_into_residue,_list_feature_into_frame,integrated_residue_iterator
from util import write_out,add_chain
from util import allowed_residue_source,allowd_scheme
from Data import CDR_annotations
import distance_util as du

def run_anarci(sequence_dict:Dict[str,str],scheme:allowd_scheme='a',
                object:Union[allowed_residue_source,None]=None,frame:Union[pd.DataFrame,None]=None)->Tuple[list,list,list]:
    """
    use sequence_dict ( generated by ResidueFeatureExtractor._produce_sequence ) rather than structures as input.
    

    return 3 list:
        anarci_order((' ',112,'A'),...);
        Fv_annotation(Fv1,Lk0,...);
        chain_type(H,L,K,X)

    you can give the object or frame as parameter if you want to impute the output lists into them.
    """
    anarci_order,Fv_annotation,chain_type=[],[],[]
    for seq in sequence_dict.values():
        assert 'X' not in seq,f'invalid seqs: {seq}'
        anarci_results=anarci.run_anarci(seq,scheme=scheme)
        anarci_maps=anarci_results[1][0]
        chain_infos=anarci_results[2][0]
        assert anarci_maps,'this chain contains no Fv fragment'
        id,end,_anarci_order,_Fv_annotation,_chain_type=0,-1,[],[],[]
        for anarci_map,chain_info in zip(anarci_maps,chain_infos):
            last_end,start,end=end,anarci_map[1],anarci_map[2]

            _anarci_order.extend(
                [(' ',-1,' ')]*(start-last_end-1))
            _Fv_annotation.extend(
                [f'Lk{id}']*(start-last_end-1))
            _chain_type.extend(
                ['X']*(start-last_end-1))

            _anarci_order.extend(
                [(' ',)+i[0] for i in anarci_map[0] if i[1]!='-'])
            _Fv_annotation.extend(
                [f'Fv{id}']*(end-start+1))
            _chain_type.extend(
                [chain_info['chain_type']]*(end-start+1))    

            id += 1

        last_end,start=end,len(seq)
        _anarci_order.extend(
                [(' ',-1,' ')]*(start-last_end-1))
        _Fv_annotation.extend(
                [f'Lk{id}']*(start-last_end-1))
        _chain_type.extend(
                ['X']*(start-last_end-1))    
        anarci_order.extend(_anarci_order)
        Fv_annotation.extend(_Fv_annotation)
        chain_type.extend(_chain_type)

    if isinstance(object,Entity):
        _list_feature_into_residue(anarci_order,'anarci_order',object)
        _list_feature_into_residue(Fv_annotation,'Fv_annotation',object)
        _list_feature_into_residue(chain_type,'chain_type',object)
    
    if isinstance(frame,pd.DataFrame):
        _list_feature_into_frame(anarci_order,'anarci_order',frame)
        _list_feature_into_frame(Fv_annotation,'Fv_annotation',frame)
        _list_feature_into_frame(chain_type,'chain_type',frame)

    return anarci_order,Fv_annotation,chain_type

def impute_cdr(object:allowed_residue_source,scheme:allowd_scheme='a')->None:
    '''
    must run `_run_anarci` before this function
    for structure which has been imputed 'anarci_order',
    impute `CDR` annotation (CDR3,FW1,AC(anchor)3,LK(linker),...) 
    '''
    def key_func(scheme:str,chaintype:str)->str:
        if scheme in ['a','i','aho','imgt']:
            return scheme
        elif scheme in ['c','chothia','k','kabat']:
            return scheme+'|'+chaintype if chaintype in ['H','L','K'] else 'a'
        else:
            raise ValueError
    for i in integrated_residue_iterator(object):
        annotation=CDR_annotations[key_func(scheme,i.xtra['chain_type'])]
        if i.xtra['anarci_order'][1]<annotation['FR1'] or i.xtra['anarci_order'][1]>annotation['end']:
            i.xtra['CDR']='LK'

        elif i.xtra['anarci_order'][1]>=annotation['FR1'] and i.xtra['anarci_order'][1]<annotation['CDR1']-1:
            i.xtra['CDR']='FW1'
        elif i.xtra['anarci_order'][1] in [annotation['CDR1']-1,annotation['FR2']] :
            i.xtra['CDR']='AC1'
        elif i.xtra['anarci_order'][1]>=annotation['CDR1'] and i.xtra['anarci_order'][1]<annotation['FR2']:
            i.xtra['CDR']='CDR1'

        elif i.xtra['anarci_order'][1]>annotation['FR2'] and i.xtra['anarci_order'][1]<annotation['CDR2']-1:
            i.xtra['CDR']='FW2'
        elif i.xtra['anarci_order'][1] in [annotation['CDR2']-1,annotation['FR3']] :
            i.xtra['CDR']='AC2'
        elif i.xtra['anarci_order'][1]>=annotation['CDR2'] and i.xtra['anarci_order'][1]<annotation['FR3']:
            i.xtra['CDR']='CDR2'

        elif i.xtra['anarci_order'][1]>annotation['FR3'] and i.xtra['anarci_order'][1]<annotation['CDR3']-1:
            i.xtra['CDR']='FW3'
        elif i.xtra['anarci_order'][1] in [annotation['CDR3']-1,annotation['FR4']] :
            i.xtra['CDR']='AC3'
        elif i.xtra['anarci_order'][1]>=annotation['CDR3'] and i.xtra['anarci_order'][1]<annotation['FR4']:
            i.xtra['CDR']='CDR3'

        elif i.xtra['anarci_order'][1]>annotation['FR4'] and i.xtra['anarci_order'][1]<=annotation['end']:
            i.xtra['CDR']='FW4'

def impute_vicinity(object:allowed_residue_source)->None:
    '''
    must run after `impute_CDR`
    need to be fixed.
    '''
    fw_heavy_list=[]
    vicinity_list=[]
    for residue in integrated_residue_iterator(object):
        #impute left /right anchor of CDR as vicinity 
        #and get list of CDR / framework_ca separately

        # if 'CDR' in residue.xtra['CDR']:
        #     residue.xtra['vicinity']=1
        #     if 'FW' in last_residue.xtra.get('CDR','X'):
        #         last_residue.xtra['vicinity']=1
        #         vicinity_list.append(last_residue)
        #     vicinity_list.append(residue)            
        # elif 'FW' in residue.xtra['CDR']:
        #     fw_heavy_list.extend([atom for atom in residue.get_atoms() if atom.element != 'H'])
        #     if 'CDR' in last_residue.xtra.get('CDR','X'):
        #         residue.xtra['vicinity']=1
        #         vicinity_list.append(residue) 
        #     else:
        #         residue.xtra['vicinity']=0
        # else:
        #     residue.xtra['vicinity']=0
        
        if 'FW' in residue.xtra['CDR']:
            fw_heavy_list.extend([atom for atom in residue.get_atoms() if atom.element != 'H'])
        elif 'AC' in residue.xtra['CDR'] or 'CDR' in residue.xtra['CDR']:
            vicinity_list.append(residue)
    
    vicinity_heavy_dict=du.atom_within_threshold(fw_heavy_list,vicinity_list,4.5)

    plus_vicinity_list=pd.Series(vicinity_heavy_dict.keys()).apply(Atom.get_parent).value_counts().index.to_list()
    vicinity_list.extend(plus_vicinity_list)
    # atom:Atom=Atom() -> a placeholder for pylance 
    for residue in integrated_residue_iterator(object):
        if residue in vicinity_list:
            residue.xtra['vicinity']=1
        else:
            residue.xtra['vicinity']=0
    
    return vicinity_list

class hmt_FvProcessor(ResidueFeatureExtractor):
    def __init__(self, scheme:allowd_scheme) -> None:
        self.scheme=scheme
        ResidueFeatureExtractor.__init__(self, 'FvProcessor', True)
    def _produce_feature(self) -> None:
        self._produce_sequence()
        run_anarci(self.sequences,self.scheme,self.object)
        impute_cdr(self.object,self.scheme)
        self._object_feature_to_frame()
    def renumber_structure(self)->Structure:
        last_Fv_annotation='holder'
        chain_dict={}
        
        def set_new_chain_id(new_chain_type:str,chain_dict:dict,linker_code:list=['A','B','C','D'])->str:
            if new_chain_type == 'H':
                new_chain_code='H'
            elif new_chain_type in ['K','L']:
                new_chain_code='L'
            elif new_chain_type=='X':
                i=0
                while linker_code[i] in chain_dict.keys():
                    i+=1
                new_chain_code=linker_code[i]
            return new_chain_code

        # def set_bfactor(CDR:str,chaintype:str)->float:
        #     if chaintype in ['K','L']:
        #         if CDR=='CDR1':
        #             return 11
        #         elif CDR=='CDR2':
        #             return 12
        #         elif CDR=='CDR3':
        #             return 13
        #         else:
        #             return 10
        #     elif chaintype=='H':
        #         if CDR=='CDR1':
        #             return 21
        #         elif CDR=='CDR2':
        #             return 22
        #         elif CDR=='CDR3':
        #             return 23
        #         else:
        #             return 20
        #     else:
        #         return 0

        def set_bfactor(CDR:str,chaintype:str)->float:
            if chaintype in ['K','L']:
                if CDR=='CDR1':
                    return 14.25
                elif CDR=='CDR2':
                    return 28.5
                elif CDR=='CDR3':
                    return 42.75
                else:
                    return 0
            elif chaintype=='H':
                if CDR=='CDR1':
                    return 57
                elif CDR=='CDR2':
                    return 71.25
                elif CDR=='CDR3':
                    return 85.5
                else:
                    return 0
            else:
                return 0
        
        for residue in integrated_residue_iterator(self.object):
            #init new chain if the `Fv_annotation` is changed.
            if residue.xtra['Fv_annotation']!=last_Fv_annotation:
                last_Fv_annotation=residue.xtra['Fv_annotation']
                chain_id=set_new_chain_id(residue.xtra['chain_type'],chain_dict)
                chain_dict[chain_id]=Chain(chain_id)
                if chain_id not in ['H','L']:
                    linker_resid=1
            #set residue id
            residue_copy=residue.copy()
            if chain_id in ['H','L']:
                residue_copy.id=residue_copy.xtra['anarci_order']
            else:
                residue_copy.id=(' ',linker_resid,' ')
                linker_resid+=1

            #set bfactor
            # atom:Atom=Atom()
            for atom in residue_copy.get_atoms():
                atom.bfactor=set_bfactor(residue_copy.xtra['CDR'],residue_copy.xtra['chain_type'])
            
            chain_dict[chain_id].add(residue_copy)

        #build structure
        builder=StructureBuilder()
        builder.init_structure(structure_id='renumbered_Fv')
        builder.init_model(0)

        for chainid,chain in chain_dict.items():
            add_chain(chain,chainid,builder.structure[0])
        
        self.built_structure=builder.get_structure()

        return self.built_structure

    def write_built_structure(self,filename:str):
        write_out(self.built_structure,filename)

            

